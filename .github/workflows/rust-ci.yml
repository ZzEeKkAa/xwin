on:
  push:
    branches:
      - main
    tags:
      - "*"
  pull_request:

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

name: CI
jobs:
  lint:
    name: Lint
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      # make sure all code has been formatted with rustfmt
      - name: check rustfmt
        run: |
          rustup component add rustfmt
          cargo fmt -- --check --color always

      # run clippy to verify we have no warnings
      - run: cargo fetch
      - name: cargo clippy
        run: |
          rustup component add clippy
          cargo clippy --all-targets --all-features -- -D warnings

  check_compiles:
    name: Verify compiles
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
      # Add the actual target we compile for in the test
      - run: rustup target add x86_64-pc-windows-msvc
      - name: symlinks
        run: |
          set -eux
          sudo ln -s clang-12 /usr/bin/clang-cl
          sudo ln -s llvm-ar-12 /usr/bin/llvm-lib
          sudo ln -s lld-link-12 /usr/bin/lld-link
          sudo ln -s lld-12 /usr/bin/ld.lld
          clang++ -v
          ld.lld -v
          llvm-lib -v
          clang-cl -v
          lld-link --version
      - run: cargo fetch
      - name: cargo test build
        run: cargo build --tests --release
      - name: cargo test
        run: cargo test --release verify_compiles

  check_deterministic:
    name: Verify deterministic
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
      - run: cargo fetch
      - name: cargo test build
        run: cargo build --tests --release
      - name: cargo test
        run: cargo test --release verify_deterministic

  check_cli:
    name: Verify CLI
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
      - run: cargo fetch
      - name: cargo test build
        run: cargo build --tests
      - name: cargo test
        run: cargo test cli_help

  deny-check:
    name: cargo-deny
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
      - uses: EmbarkStudios/cargo-deny-action@v1
        with:
          command: check
          arguments: --all-features

  publish-check:
    name: Publish Check
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
      - run: cargo fetch
      - name: cargo publish check
        run: cargo publish --dry-run

#  macos:
#    name: MacOS Build
#    needs: [deny-check]
#    if: startsWith(github.ref, 'refs/tags/')
#    runs-on: macos-latest
#    steps:
#      - uses: actions/checkout@v2
#      - name: Install Rust toolchain
#        uses: actions-rs/toolchain@v1
#        with:
#          toolchain: stable
#          target: aarch64-apple-darwin
#          profile: minimal
#          default: true
#      - name: Cache cargo build
#        uses: Swatinem/rust-cache@v1
#      - name: Build
#        uses: messense/maturin-action@v1
#        with:
#          args: --release --out dist --universal2
#      - name: Upload wheels
#        uses: actions/upload-artifact@v2
#        with:
#          name: wheels
#          path: dist
#      - name: Upload binary artifacts
#        uses: actions/upload-artifact@v2
#        with:
#          name: apple-darwin-bin
#          path: target/release/xwin
#          if-no-files-found: error
#      - name: Get tag
#        if: "startsWith(github.ref, 'refs/tags/')"
#        id: tag
#        uses: dawidd6/action-get-tag@v1
#      - name: Archive binary
#        if: "startsWith(github.ref, 'refs/tags/')"
#        run: |
#          cd target/release
#          tar czvf xwin-${{ steps.tag.outputs.tag }}.apple-darwin.tar.gz xwin
#          shasum -a 256 xwin-${{ steps.tag.outputs.tag }}.apple-darwin.tar.gz > xwin-${{ steps.tag.outputs.tag }}.apple-darwin.tar.gz.sha256
#          cd -

  linux:
    name: Linux Build
    needs: [deny-check]
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-20.04
    steps:
      - name: Install stable toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
          target: x86_64-unknown-linux-musl
      - name: Install musl tools
        run: sudo apt-get install -y musl-tools
      - name: Checkout
        uses: actions/checkout@v2
      - run: cargo fetch --target x86_64-unknown-linux-musl
      - name: Release build
        shell: bash
        run: |
          cargo build --release --target x86_64-unknown-linux-musl
      - name: Package
        shell: bash
        run: |
          name=xwin
          tag=$(git describe --tags --abbrev=0)
          target="x86_64-unknown-linux-musl"
          release_name="$name-$tag-$target"
          release_tar="${release_name}.tar.gz"
          mkdir "$release_name"

          strip "target/$target/release/$name"

          cp "target/$target/release/$name" "$release_name/"
          cp README.md LICENSE-APACHE LICENSE-MIT "$release_name/"
          tar czvf "$release_tar" "$release_name"

          rm -r "$release_name"
          echo -n "$(shasum -ba 256 "${release_tar}" | cut -d " " -f 1)" > "${release_tar}.sha256"
          echo "release_tar=$release_name" >> $GITHUB_ENV
      - name: Upload wheels
        uses: actions/upload-artifact@v2
        with:
          name: wheels
          path: |
            ${{env.release_tar}}
            ${{env.release_tar}}.sha256

  release:
    name: Release
    runs-on: ubuntu-latest
    if: "startsWith(github.ref, 'refs/tags/')"
#    needs: [ macos, linux ]
    needs: [ linux ]
    steps:
      - uses: actions/download-artifact@v2
        with:
          name: wheels
      - name: Publish
        uses: softprops/action-gh-release@v1
        with:
          draft: true
          files: "xwin*"
        env:
          GITHUB_TOKEN: ${{ secrets.RELEASE_TOKEN }}
